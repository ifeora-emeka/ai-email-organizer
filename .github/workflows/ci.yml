name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Setup environment variables
      run: |
        echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/test_db" >> $GITHUB_ENV
        echo "NEXTAUTH_SECRET=test-secret-key-for-ci" >> $GITHUB_ENV
        echo "NEXTAUTH_URL=http://localhost:3000" >> $GITHUB_ENV
        echo "GOOGLE_CLIENT_ID=test-client-id" >> $GITHUB_ENV
        echo "GOOGLE_CLIENT_SECRET=test-client-secret" >> $GITHUB_ENV
        echo "OPENAI_API_KEY=test-openai-key" >> $GITHUB_ENV
        echo "GOOGLE_CLOUD_PROJECT_ID=test-project" >> $GITHUB_ENV
        echo "GOOGLE_PUBSUB_TOPIC=test-topic" >> $GITHUB_ENV
        echo "GOOGLE_PUBSUB_SUBSCRIPTION=test-subscription" >> $GITHUB_ENV

    - name: Generate Prisma client
      run: npm run db:generate

    - name: Run database migrations
      run: npm run db:push

    - name: Run linting
      run: npm run lint

    - name: Run frontend tests
      run: npm run test

    - name: Run tests with coverage
      run: npm run test:coverage

    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      if: matrix.node-version == '20.x'
      with:
        file: ./coverage/lcov.info
        fail_ci_if_error: false
        verbose: true

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Setup environment variables for build
      run: |
        echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/test_db" >> $GITHUB_ENV
        echo "NEXTAUTH_SECRET=test-secret-key-for-ci" >> $GITHUB_ENV
        echo "NEXTAUTH_URL=http://localhost:3000" >> $GITHUB_ENV
        echo "GOOGLE_CLIENT_ID=test-client-id" >> $GITHUB_ENV
        echo "GOOGLE_CLIENT_SECRET=test-client-secret" >> $GITHUB_ENV

    - name: Generate Prisma client
      run: npm run db:generate

    - name: Build frontend
      run: npm run build:frontend

    - name: Build server
      run: npm run build:server

    - name: Cache build artifacts
      uses: actions/cache@v4
      with:
        path: |
          .next
          dist
        key: ${{ runner.os }}-build-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-build-

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run security audit
      run: npm audit --audit-level=high

    - name: Check for vulnerabilities
      run: npm audit --audit-level=moderate --production
