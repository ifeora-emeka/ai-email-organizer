generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  accounts      Account[]
  sessions      Session[]
  gmailAccounts GmailAccount[]
  categories    Category[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model GmailAccount {
  id                String   @id @default(cuid())
  userId            String
  email             String
  name              String?
  accessToken       String
  refreshToken      String?
  scope             String?
  isActive          Boolean  @default(true)
  lastSync          DateTime @default(now())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  emails            Email[]
  
  @@unique([userId, email])
}

model Category {
  id          String   @id @default(cuid())
  userId      String
  name        String
  description String
  color       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  emails      Email[]
  
  @@unique([userId, name])
}

model Email {
  id              String       @id @default(cuid())
  gmailAccountId  String
  categoryId      String?
  messageId       String       @unique
  threadId        String?
  subject         String?
  fromEmail       String
  fromName        String?
  toEmails        String
  ccEmails        String?
  bccEmails       String?
  body            String?
  htmlBody        String?
  receivedAt      DateTime
  hasAttachments  Boolean      @default(false)
  isRead          Boolean      @default(false)
  isArchived      Boolean      @default(false)
  aiSummary       String?
  aiCategory      String?
  aiConfidence    Float?
  unsubscribeLink String?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  
  gmailAccount    GmailAccount @relation(fields: [gmailAccountId], references: [id], onDelete: Cascade)
  category        Category?    @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  attachments     Attachment[]
}

model Attachment {
  id          String   @id @default(cuid())
  emailId     String
  filename    String
  mimeType    String
  size        Int
  attachmentId String
  createdAt   DateTime @default(now())
  
  email       Email    @relation(fields: [emailId], references: [id], onDelete: Cascade)
}

model EmailProcessingQueue {
  id             String   @id @default(cuid())
  gmailAccountId String
  messageId      String
  status         String   @default("pending")
  attempts       Int      @default(0)
  lastAttempt    DateTime?
  errorMessage   String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  @@unique([gmailAccountId, messageId])
}

model UnsubscribeTask {
  id              String   @id @default(cuid())
  emailId         String
  unsubscribeLink String
  status          String   @default("pending")
  attempts        Int      @default(0)
  lastAttempt     DateTime?
  errorMessage    String?
  successMessage  String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@unique([emailId])
}
